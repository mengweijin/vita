server:
  port: 8080
  servlet:
    context-path: /
#日志配置, 2.5.5 以后的配置。以前的版本是 logging.file: logs/application.log
logging:
  file:
    name: logs/application.log
  level:
    root: info
    com.github.mengweijin: info
spring:
  application:
    name: @project.artifactId@
  profiles:
    active: h2
  banner:
    location: classpath:banner.txt
  thymeleaf:
    cache: false
  mvc:
    throw-exception-if-no-handler-found: false
  resources:
    # 对于Restful风格的应用应该设置为false; 对于传统的应用（如: 使用thymeleaf），应该设置为 true, 否则浏览器访问不到静态资源文件
    add-mappings: true
  main:
    # 是否允许循环依赖（Spring Cloud Alibaba Sentinel 中就有循环依赖）
    allow-circular-references: false
  jackson:
    # 默认就是UTC时区
    #time-zone: UTC
    # 加上这个配置，从前台接收LocalDateTime类型可直接使用@DateTimeFormat注解
    #date-format: yyyy-MM-dd HH:mm:ss
    # 序列化所有实体类的字段，包括值为null的
    default-property-inclusion: ALWAYS
  task:
    # @Async Spring异步任务
    execution:
      pool:
        # default 8  TaskExecutionProperties
        core-size: 8
    # scheduler Spring调度任务
    scheduling:
      pool:
        # default 1  TaskSchedulingProperties
        size: 8
  # flyway在spring boot中默认配置位置为：classpath:db/migration
  # flyway命名规则为：V<VERSION>__<NAME>.sql (with <VERSION> an underscore-separated version, such as ‘1’ or ‘2_1’)
  flyway:
    # 默认不启用，true 为启用
    enabled: true
    baseline-on-migrate: true
    # 禁用 placeholder replacement，否则 sql 脚本中不能写 ${} 这样的字符。
    placeholder-replacement: false
    locations:
      - classpath:db/migration/h2
      # - classpath:db/migration/mysql
      # - classpath:db/migration/oracle
  data:
    redis:
      host: localhost
      port: 6379
      # password:
minio:
  url: http://localhost:9090
  username: root
  password: minioadmin
  bucket: vitality
# mybatis-plus
mybatis-plus:
  # MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。
  mapper-locations: classpath*:/mapper/**/*.xml
  # 配置扫描通用枚举，支持统配符 * 或者 ; 分割，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  #type-enums-package: com.mwj.cms.common.enums
  global-config:
    # 打印mybatis-plus的logo
    banner: false
    db-config:
      # 是否开启 LIKE 查询，即根据 entity 自动生成的 where 条件中 String 类型字段 是否使用 LIKE，默认不开启。
      #column-like: false
      # 全局默认主键生成策略类型。默认值ASSIGN_ID
      id-type: ASSIGN_ID
      # 表名、是否使用下划线命名，默认数据库表使用下划线命名
      table-underline: true
      # 是否开启大写命名，默认不开启
      capital-mode: false
      #全局逻辑删除字段值 3.3.0开始支持。
      logic-delete-field: deleted
      # 逻辑已删除值,(逻辑删除下有效)
      logic-delete-value: 1
      # 逻辑未删除值,(逻辑删除下有效)
      logic-not-delete-value: 0
  configuration:
    # MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，
    # 这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。
    call-setters-on-nulls: true
    # 对JavaBean中属性开启自动驼峰命名规则（camel case）映射，默认对返回类型为Map的对象的key不起作用，所以需要使用自定义MybatisMapWrapperFactory类来处理
    map-underscore-to-camel-case: true
# Spring Boot的actuator（健康监控）功能，访问：http://localhost:80/actuator
management:
  # server:
    # 不配置的话默认使用应用程序下的端口
    # port: 8080
  endpoint:
    health:
      # always / never / when-authorized
      show-details: never
  endpoints:
    web:
      # 默认即为：/actuator
      # base-path: /actuator
      exposure:
        # 要暴露出来的接口，可配置：health(默认), info（2.5.0后不再默认暴露出去）, 配置为 * 代表所有
        include: [ "health" ]
        # exclude: ["trace"]
decorator:
  datasource:
    enabled: false
vitality:
  debug: false
  # 是否允许跨域
  cors: true
  # 默认配置加密 key。如：spring.datasource.password='{cipher}Hzy5iliJbwDHhjLs1L0j6w=='
  #cipher: vitality-abcd-1234
