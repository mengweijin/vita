server:
  port: 8080
  servlet:
    context-path: /
#日志配置, 2.5.5 以后的配置。以前的版本是 logging.file: logs/application.log
logging:
  file:
    name: logs/application.log
  level:
    root: info
    com.github.mengweijin: debug
spring:
  application:
    name: @project.artifactId@
  profiles:
    active: h2
  banner:
    location: classpath:banner.txt
  thymeleaf:
    cache: false
  mvc:
    throw-exception-if-no-handler-found: false
  servlet:
    multipart:
      enabled: true
      max-file-size: 100MB
      max-request-size: 100MB
  resources:
    # 对于Restful风格的应用应该设置为false; 对于传统的应用（如: 使用thymeleaf），应该设置为 true, 否则浏览器访问不到静态资源文件
    add-mappings: true
  main:
    # 是否允许循环依赖（Spring Cloud Alibaba Sentinel 中就有循环依赖）
    allow-circular-references: false
  jackson:
    # 默认就是UTC时区
    #time-zone: UTC
    # 加上这个配置，从前台接收LocalDateTime类型可直接使用@DateTimeFormat注解
    #date-format: yyyy-MM-dd HH:mm:ss
    # 序列化所有实体类的字段，包括值为null的
    default-property-inclusion: ALWAYS
  task:
    # @Async Spring异步任务
    execution:
      pool:
        # default 8  TaskExecutionProperties
        core-size: 8
    # @Scheduled Spring调度任务
    scheduling:
      pool:
        # default 1  TaskSchedulingProperties
        size: 8
  # flyway在spring boot中默认配置位置为：classpath:db/migration
  # flyway命名规则为：V<VERSION>__<NAME>.sql (with <VERSION> an underscore-separated version, such as ‘1’ or ‘2_1’)
  flyway:
    # 默认不启用，true 为启用
    enabled: true
    baseline-on-migrate: true
    # 禁用 placeholder replacement，否则 sql 脚本中不能写 ${} 这样的字符。
    placeholder-replacement: false
    locations:
      - classpath:db/migration/h2
      # - classpath:db/migration/mysql
      # - classpath:db/migration/oracle
  data:
    redis:
      host: localhost
      port: 6379
      # password:
minio:
  ## 9090 是控制台端口；9000 是上传时用的 API 端口。
  url: http://localhost:9000
  username: root
  password: minioadmin
  bucket: vitality
# mybatis-plus MybatisPlusProperties.java
mybatis-plus:
  # MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。
  mapper-locations: classpath*:/mapper/**/*.xml
  global-config:
    # 打印mybatis-plus的logo
    banner: false
    db-config:
      #全局逻辑删除字段值 3.3.0开始支持。
      logic-delete-field: deleted
  configuration:
    # MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，
    # 这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常。
    call-setters-on-nulls: true
    # 对JavaBean中属性开启自动驼峰命名规则（camel case）映射，默认对返回类型为Map的对象的key不起作用，所以需要使用自定义MybatisMapWrapperFactory类来处理
    map-underscore-to-camel-case: true
# Spring Boot的 actuator（健康监控）功能，访问：http://localhost:8080/actuator
# management.server: ManagementServerProperties.java
# management.endpoints.web: WebEndpointProperties.java  默认：http://localhost:8080/actuator/health
# management.endpoint.health: HealthEndpointProperties.java
# springdoc-openapi项目配置

# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.github.mengweijin
# knife4j的增强配置。http://localhost:8080/doc.html
knife4j:
  enable: true
  setting:
    language: zh_cn
    swagger-model-name: 实体类列表
  production: false
decorator:
  datasource:
    enabled: false
vitality:
  debug: false
  # 是否允许跨域
  allowed-cors: true
  # 默认配置加密 key。如：spring.datasource.password='{cipher}Hzy5iliJbwDHhjLs1L0j6w=='
  #cipher: vitality-abcd-1234
