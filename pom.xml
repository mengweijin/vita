<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">  
    <modelVersion>4.0.0</modelVersion>  
    <groupId>com.github.mengweijin</groupId>  
    <artifactId>quickboot-parent</artifactId>  
    <version>1.0.44</version>  
    <packaging>pom</packaging>  
    <name>quickboot-parent</name>  
    <description>quickboot-parent</description>  
    <modules> 
        <module>./quickboot-framework</module>  
        <module>./quickboot-jpa</module>  
        <module>./quickboot-mybatis-plus</module>  
        <module>./quickboot-orika</module>  
        <module>./quickboot-layui</module>  
        <module>sample-quickboot-auth-client</module>  
        <module>sample-quickboot-jpa-layui</module>  
        <module>sample-quickboot-mybatis-plus</module>  
        <module>quickboot-auth-client</module>  
        <module>quickboot-auth-server</module>  
        <module>quickboot-cache-expired</module>  
        <module>quickboot-flowable</module>  
        <module>tool-quickboot</module> 
    </modules>  
    <properties> 
        <quickboot.version>1.0.44</quickboot.version>  
        <sonar.host.url>http://192.168.188.128:9000</sonar.host.url>  
        <sonar.login>7739e29b37d43a10c220f5b0ef09fb1dfea2b5ee</sonar.login>  
        <sonar.exclusions>**/generated/**/*, **/model/**/*</sonar.exclusions>  
        <sonar.test.exclusions>src/test/**/*</sonar.test.exclusions>  
        <sonar.coverage.exclusions>src/main/**/*</sonar.coverage.exclusions>  
        <spring.boot.version>2.6.7</spring.boot.version>  
        <spring.cloud.version>2021.0.2</spring.cloud.version>  
        <!--从 2021.0.1.0 开始，SCA（spring cloud alibaba）版本将会对应 Spring Cloud 版本，前三位为 Spring Cloud 版本，最后一位为扩展版本-->  
        <spring.cloud.alibaba.version>2021.0.1.0</spring.cloud.alibaba.version>  
        <java.version>1.8</java.version>  
        <resource.delimiter>@</resource.delimiter>  
        <maven.compiler.source>${java.version}</maven.compiler.source>  
        <maven.compiler.target>${java.version}</maven.compiler.target>  
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>  
        <hutool.version>5.7.21</hutool.version>  
        <orika.version>1.5.4</orika.version>  
        <jjwt.version>0.9.1</jjwt.version>  
        <mybatis-plus.version>3.5.1</mybatis-plus.version>  
        <p6spy-spring-boot-starter.version>1.8.0</p6spy-spring-boot-starter.version>  
        <springdoc.version>1.6.6</springdoc.version>  
        <testable.version>0.7.5</testable.version> 
    </properties>  
    <url>https://gitee.com/mengweijin/quickboot</url>  
    <!-- 开源许可证 -->  
    <licenses> 
        <license> 
            <name>The Apache Software License, Version 2.0</name>  
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url> 
        </license> 
    </licenses>  
    <!-- 开发者信息 -->  
    <developers> 
        <developer> 
            <name>Meng Wei Jin</name>  
            <email>mengweijin.work@foxmail.com</email> 
        </developer> 
    </developers>  
    <!--开源地址-->  
    <scm> 
        <url>https://gitee.com/mengweijin/quickboot</url> 
    </scm>  
    <!--  Issue地址  -->  
    <issueManagement> 
        <system>Gitee Issue</system>  
        <url>https://gitee.com/mengweijin/quickboot/issues</url> 
    </issueManagement>  
    <dependencyManagement> 
        <dependencies> 
            <dependency> 
                <groupId>org.springframework.boot</groupId>  
                <artifactId>spring-boot-dependencies</artifactId>  
                <version>${spring.boot.version}</version>  
                <type>pom</type>  
                <scope>import</scope> 
            </dependency>  
            <dependency> 
                <groupId>org.springframework.cloud</groupId>  
                <artifactId>spring-cloud-dependencies</artifactId>  
                <version>${spring.cloud.version}</version>  
                <type>pom</type>  
                <scope>import</scope> 
            </dependency>  
            <dependency> 
                <groupId>com.alibaba.cloud</groupId>  
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>  
                <version>${spring.cloud.alibaba.version}</version>  
                <type>pom</type>  
                <scope>import</scope> 
            </dependency>  
            <dependency> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>quickboot-orika</artifactId>  
                <version>${quickboot.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>quickboot-framework</artifactId>  
                <version>${quickboot.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>quickboot-mybatis-plus</artifactId>  
                <version>${quickboot.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>quickboot-jpa</artifactId>  
                <version>${quickboot.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>quickboot-layui</artifactId>  
                <version>${quickboot.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>cn.hutool</groupId>  
                <artifactId>hutool-all</artifactId>  
                <version>${hutool.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>ma.glasnost.orika</groupId>  
                <artifactId>orika-core</artifactId>  
                <version>${orika.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.baomidou</groupId>  
                <artifactId>mybatis-plus-boot-starter</artifactId>  
                <version>${mybatis-plus.version}</version> 
            </dependency>  
            <!-- Token生成与解析-->  
            <dependency> 
                <groupId>io.jsonwebtoken</groupId>  
                <artifactId>jjwt</artifactId>  
                <version>${jjwt.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.github.gavlyukovskiy</groupId>  
                <artifactId>p6spy-spring-boot-starter</artifactId>  
                <version>${p6spy-spring-boot-starter.version}</version> 
            </dependency>  
            <dependency> 
                <!-- Swagger UI page：http://localhost:8080/swagger-ui/index.html -->  
                <!-- Swagger UI page：http://localhost:8080/swagger-ui.html -->  
                <!--  OpenAPI description：http://localhost:8080/v3/api-docs -->  
                <groupId>org.springdoc</groupId>  
                <artifactId>springdoc-openapi-ui</artifactId>  
                <version>${springdoc.version}</version> 
            </dependency>  
            <dependency> 
                <groupId>com.alibaba.testable</groupId>  
                <artifactId>testable-all</artifactId>  
                <version>${testable.version}</version>  
                <scope>test</scope> 
            </dependency> 
        </dependencies> 
    </dependencyManagement>  
    <build> 
        <resources> 
            <!-- 从 spring-boot-starter-parent 中参考 -->  
            <!-- 在 spring-boot-starter-parent 中 maven-resources-plugin 插件中 maven 的变量被重新定义了-->  
            <!-- <configuration><delimiters><delimiter>${resource.delimiter}</delimiter></delimiters><useDefaultDelimiters>false</useDefaultDelimiters></configuration> -->  
            <!-- 这就是为什么项目依赖 spring-boot-starter-parent 时，可以在 application.yaml 中使用 @project.parent.groupId@ 来引用 maven 中的变量-->  
            <!-- 而当使用 spring-boot-dependencies（没有重新定义maven-resources-plugin插件中delimiter） 时，重写不能使用 @project.parent.groupId@ 的原因-->  
            <!-- 开启过滤，用指定的参数替换directory下的文件中的参数-->  
            <resource> 
                <directory>${basedir}/src/main/resources</directory>  
                <filtering>true</filtering>  
                <includes> 
                    <include>**/application*.yml</include>  
                    <include>**/application*.yaml</include>  
                    <include>**/application*.properties</include> 
                </includes> 
            </resource>  
            <resource> 
                <directory>${basedir}/src/main/resources</directory>  
                <excludes> 
                    <exclude>**/application*.yml</exclude>  
                    <exclude>**/application*.yaml</exclude>  
                    <exclude>**/application*.properties</exclude> 
                </excludes> 
            </resource> 
        </resources>  
        <plugins> 
            <plugin> 
                <groupId>com.github.mengweijin</groupId>  
                <artifactId>license-maven-plugin</artifactId>  
                <version>1.0.1</version> 
            </plugin>  
            <plugin> 
                <groupId>org.sonarsource.scanner.maven</groupId>  
                <artifactId>sonar-maven-plugin</artifactId>  
                <version>3.9.1.2184</version> 
            </plugin>  
            <plugin> 
                <groupId>com.github.shalousun</groupId>  
                <artifactId>smart-doc-maven-plugin</artifactId>  
                <version>2.4.0</version>  
                <configuration> 
                    <!--指定生成文档的使用的配置文件,配置文件放在自己的项目中-->  
                    <configFile>./src/main/resources/smart-doc.json</configFile> 
                </configuration>  
                <executions> 
                    <execution> 
                        <!--如果不需要在执行编译时启动smart-doc，则将phase注释掉-->  
                        <!--<phase>compile</phase>-->  
                        <goals> 
                            <!--smart-doc提供了html、openapi、markdown等goal，可按需配置-->  
                            <goal>html</goal> 
                        </goals> 
                    </execution> 
                </executions> 
            </plugin>  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-resources-plugin</artifactId>  
                <configuration> 
                    <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>  
                    <delimiters> 
                        <delimiter>${resource.delimiter}</delimiter> 
                    </delimiters>  
                    <useDefaultDelimiters>false</useDefaultDelimiters>  
                    <nonFilteredFileExtensions> 
                        <!-- 支持字体库 -->  
                        <!--vue element-ui icon打包后放在springboot中icon没有显示的问题-->  
                        <!--参考博客（只需要看后半段，前半段不对）：https://blog.csdn.net/dylin83/article/details/115090256-->  
                        <!--上面的配置就造成了springboot 用maven打包时把resource进行了filter，字库文件被修改了！！-->  
                        <!--解决方案：让ttf和woff文件不要filter-->  
                        <!-- 不要过滤字体库，会造成字体库内容变化，显示不了 -->  
                        <nonFilteredFileExtension>woff</nonFilteredFileExtension>  
                        <nonFilteredFileExtension>woff2</nonFilteredFileExtension>  
                        <nonFilteredFileExtension>eot</nonFilteredFileExtension>  
                        <nonFilteredFileExtension>ttf</nonFilteredFileExtension>  
                        <nonFilteredFileExtension>svg</nonFilteredFileExtension> 
                    </nonFilteredFileExtensions> 
                </configuration>  
                <version>3.2.0</version> 
            </plugin>  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-surefire-plugin</artifactId>  
                <version>2.12.4</version>  
                <configuration> 
                    <argLine>-javaagent:${settings.localRepository}/com/alibaba/testable/testable-agent/${testable.version}/testable-agent-${testable.version}.jar</argLine> 
                </configuration> 
            </plugin>  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-compiler-plugin</artifactId>  
                <version>3.8.1</version>  
                <configuration> 
                    <source>${java.version}</source>  
                    <target>${java.version}</target>  
                    <encoding>${project.build.sourceEncoding}</encoding> 
                </configuration> 
            </plugin>  
            <!-- Source -->  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-source-plugin</artifactId>  
                <version>3.2.1</version>  
                <executions> 
                    <execution> 
                        <phase>package</phase>  
                        <goals> 
                            <goal>jar-no-fork</goal> 
                        </goals> 
                    </execution> 
                </executions> 
            </plugin>  
            <!-- Javadoc -->  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-javadoc-plugin</artifactId>  
                <version>3.2.0</version>  
                <configuration> 
                    <charset>UTF-8</charset>  
                    <docencoding>UTF-8</docencoding>  
                    <additionalOptions> 
                        <!--由于JDK8的java doc生成机制比之前的要严谨许多,导致项目用maven打包的时候出错 解决办法: 添加-Xdoclint:none配置-->  
                        <additionalOption>-Xdoclint:none</additionalOption> 
                    </additionalOptions> 
                </configuration>  
                <executions> 
                    <execution> 
                        <phase>package</phase>  
                        <goals> 
                            <goal>jar</goal> 
                        </goals> 
                    </execution> 
                </executions> 
            </plugin>  
            <!-- GPG -->  
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-gpg-plugin</artifactId>  
                <version>1.6</version>  
                <executions> 
                    <execution> 
                        <phase>verify</phase>  
                        <goals> 
                            <goal>sign</goal> 
                        </goals> 
                    </execution> 
                </executions> 
            </plugin>  
            <plugin> 
                <groupId>org.sonatype.plugins</groupId>  
                <artifactId>nexus-staging-maven-plugin</artifactId>  
                <version>1.6.8</version>  
                <extensions>true</extensions>  
                <configuration> 
                    <serverId>oss</serverId>  
                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>  
                    <autoReleaseAfterClose>true</autoReleaseAfterClose> 
                </configuration> 
            </plugin> 
        </plugins> 
    </build>  
    <!--  提交到资料库的地址  -->  
    <distributionManagement> 
        <snapshotRepository> 
            <id>oss</id>  
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url> 
        </snapshotRepository>  
        <repository> 
            <id>oss</id>  
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url> 
        </repository> 
    </distributionManagement> 
</project>
