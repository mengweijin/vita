apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
  namespace: ns1
  labels:
    app: app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
        - name: app1
          image: registry.cn-hangzhou.aliyuncs.com/mengweijin/sample-quickboot-mybatis-plus:0.0.1.2-SNAPSHOT
          # IfNotPresent, Always, Never
          imagePullPolicy: IfNotPresent
          args: ['-Xmx100m', '--server.ssl.enabled=false']
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app1
  namespace: ns1
spec:
  # type: NodePort
  selector:
    app: app1
  ports:
    # 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。
    - port: 8080
      targetPort: 8080
      # 在 Istio Gateway 中必须配置，并且格式为："<protocol>[-<suffix>]"
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
  namespace: ns1
  labels:
    app: app2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
        - name: app2
          image: registry.cn-hangzhou.aliyuncs.com/mengweijin/sample-quickboot-mybatis-plus:0.0.1.2-SNAPSHOT
          # IfNotPresent, Always, Never
          imagePullPolicy: IfNotPresent
          args: ['-Xmx100m', '--server.ssl.enabled=false']
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app2
  namespace: ns1
spec:
  # type: NodePort
  selector:
    app: app2
  ports:
    # 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。
    - port: 8080
      targetPort: 8080
      # 在 Istio Gateway 中必须配置，并且格式为："<protocol>[-<suffix>]"
      name: http
---
# Istio 内部 mtls 双向认证策略
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: ns1-peer-authentication
  # 要使用自动双向认证策略的命名空间
  namespace: ns1
spec:
  mtls:
    mode: STRICT
---
# 跨命名空间服务之间认证策略
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: ns1-authorization-policy
  namespace: ns1
spec:
  action: ALLOW
  rules:
    - from:
        - source:
            # 只允许 namespace=ns1 中的服务访问，并且允许的命名空间必须都开启了Istio Label，否则依然无法访问成功
            namespaces: ["ns1", "ns2"]


